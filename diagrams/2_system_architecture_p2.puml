@startuml

' Set the main direction to vertical
top to bottom direction

title 도 1. 전체 시스템 구성도 2/2 (2025-10-18)

'================================================================
' Worflogy.com Website Theme for PlantUML
'================================================================

'// 1. 전역 스타일 (Global Style & Fonts) //
skinparam backgroundColor #ffffff
skinparam defaultFontName "Pretendard"
skinparam defaultFontSize 13
skinparam defaultFontColor #2D3748
skinparam shadowing false
skinparam roundCorner 16

'// 2. 화살표 및 연결선 스타일 (Arrow & Connector Style) //
skinparam ArrowColor #718096
skinparam ArrowThickness 1.5
skinparam ArrowFontColor #718096
skinparam ArrowFontSize 12
skinparam linetype ortho

'// 3. 기본 요소 스타일 (Standard Elements Style) //
skinparam card {
  BackgroundColor #ffffff
  BorderColor #718096
}
skinparam note {
  BackgroundColor #ffffff
  BorderColor #718096
  FontColor #2D3748
}
skinparam component {
  BackgroundColor #ffffff
  BorderColor #718096
}
skinparam package {
  BackgroundColor #ffffff
  BorderColor #718096
}
skinparam database {
  BackgroundColor #ffffff
  BorderColor #718096
}
' [추가] 파티션(Partition) 스타일 정의
skinparam partition {
  BackgroundColor #F4F6F8 ' 웹사이트의 연한 배경색으로 구분감 부여
  BorderColor #718096
  FontColor #2D3748
}

'// 4. 강조 요소 스타일 (Accent Elements Style) //
skinparam actor {
  BackgroundColor #4338CA
  BorderColor #4338CA
  FontColor #ffffff
}
skinparam participant {
  BackgroundColor #4338CA
  BorderColor #4338CA
  FontColor #ffffff
}
skinparam usecase {
  BackgroundColor #ffffff
  BorderColor #4338CA
  ArrowColor #4338CA
}
skinparam activity {
  BackgroundColor #ffffff
  BorderColor #4338CA
  FontColor #2D3748
}

'// 5. 클래스 다이어그램 스타일 (Class Diagram Style) //
skinparam class {
  BackgroundColor #ffffff
  BorderColor #718096 ' [수정] 테두리 색상 변경
  HeaderBackgroundColor #4338CA
  FontColor #ffffff
  AttributeFontColor #2D3748
  AttributeFontSize 12
}

'================================================================

' Layout & Components
rectangle "사용자 인터페이스 계층" {
  rectangle "<b>사용자/참여자</b>\n(100)" as User
  rectangle "<b>리포팅/거버넌스 인터페이스</b>\n(800)" as RPT
note right of RPT
[도2] 상태 전이
  Decision→Report→EM→Feedback
[도4] 잠재 가설 환류/재노출
[도8] 보고서 용어 정규화
  표준 용어 뷰
[도9] 감사 뷰/히스토리
end note

  User -[hidden]right- RPT
}

rectangle "애플리케이션/로직 계층" {
  rectangle "<b>잠재 가설 관리자</b>\n(700)" as WS
note right of WS
[도4] 잠재 가설(위크시그널)
  보관/재노출
end note

  rectangle "<b>이해/RAG 모듈</b>\n(200)" as RAG
note right of RAG
[도10] 교차 T-Box 추천 표시
[도7] Subkeys 제안 연계
end note

  rectangle "<b>중간 목표 생성 모듈</b>\n(210)" as SubkeyGen
note right of SubkeyGen
[도7] Subkeys 자동 생성 제안
  표시≠채택
end note

  rectangle "<b>회의 기록 모듈</b>\n(300)" as MTG
  rectangle "<b>상태 머신</b>\n(400)" as SM
note right of SM
[도12] EM 변경=분기
  CONTEXT_FORK 후
  신규 등록
end note

  rectangle "<b>모니터링/증거 관리자</b>\n(600)" as MON

' Use hidden links to create a grid layout
  WS -[hidden]right- RAG
  RAG -[hidden]right- SubkeyGen
  MTG -[hidden]right- MON
  MON -[hidden]right- SM
  WS -[hidden]down- MTG
}

rectangle "데이터 계층" {
  database "<b>온톨로지 데이터베이스</b>\n(500)" as DB
note right of DB
[도9] 이벤트 소싱/감사
  append-only 스트림/뷰
end note
}

' Data Flow (Manually re-routed for clarity)
'--- Primary Input & Creation Flow ---
User -down-> RAG: 이슈 제기 (As-Is, To-Be)
RAG -right-> SubkeyGen: As-Is/To-Be 전달
SubkeyGen -down-> RAG: Subkeys 제안
RAG -down-> MTG: ProblemBrief, EvidencePack
User -[dashed]down-> MTG: 회의 참여/입력
MTG -down-> DB: 링크 객체 생성/갱신

'--- Feedback Loop (Left side) ---
DB -left-> WS: 미채택 링크 전달 (잠재 가설)
WS -down-> RAG: 다음 의제 후보 재노출

'--- Reporting Loop (Far Left side) ---
DB -left-> RPT: 보고서 데이터 제공
RPT -up-> User: 보고서 조회

'--- Governance & Monitoring Loop (Right side) ---
DB -[dashed]right-> SM: 상태 조회/변경
SM -down-> MON: 컨텍스트 잠금 신호
MON -down-> DB: 실행 증거 기록

'--- Notification (Routed cleanly) ---
MON -[dashed]up-> User: 비차단 알림

note as N1
  <b><size:12>링크 객체 (원자적 라인리지)</size></b>
  (i) 설명 (rationale) + 증거
  (ii) 의사결정 (decision)
  (iii) 실행 (ops)
  (iv) 출처 (provenance)
endnote

DB -[hidden]right- N1

legend left
적용 위치 (전체 서비스 흐름도_updated 기준)
- 전 스테이지: 시스템 구성 관점(전체 아키텍처)
- 스테이지 1: 이해/RAG 모듈(200), 중간 목표 생성(210) ← [도10, 도7]
- 스테이지 1·4: 용어집/정규화(표준 용어 뷰/갱신) ← [도8]
- 스테이지 4: 이벤트 소싱/감사(온톨로지 DB/뷰, 보고) ← [도9]
- 스테이지 4: Execution Monitoring/상태 머신(400) ← [도12]
- 스테이지 4: 리포팅/거버넌스 인터페이스(800) ← [도2, 도4, 도8, 도9]
end legend

@enduml
